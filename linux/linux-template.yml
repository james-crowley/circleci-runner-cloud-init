AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create an EC2 instance with CircleCI runner agent installation via Cloud-init.

Parameters:
  EC2Name:
    Type: String
    Description: "Name of the EC2 Instance"

  VpcID:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC to be used

  SubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the Subnet to be used

  EC2KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.medium
      - t3a.xlarge
      - m5.2xlarge
      - m6i.4xlarge
      - c6i.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  AMIId:
    Description: AMI ID for the EC2 instance (must be RPM or DEB based system).
    Type: AWS::EC2::Image::Id
    ConstraintDescription: Must be a valid AMI ID that supports RPM or DEB packaging.
    Default: ami-0e86e20dae9224db8

  ResourceClassToken:
    Description: CircleCI Runner Authentication Token (must be 80 alphanumeric characters)
    Type: String
    NoEcho: true
    AllowedPattern: "^[a-zA-Z0-9]{80}$"
    MinLength: 80
    MaxLength: 80
    ConstraintDescription: Token must be exactly 80 alphanumeric characters (letters and numbers only).

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyPair
      ImageId: !Ref AMIId
      SubnetId: !Ref SubnetID
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          packages:
            - ca-certificates
            - curl
            - coreutils
            - tar
            - gzip
            - gnupg

          runcmd:
            # Install CircleCI runner (choose RPM or DEB based on system)
            - |
              if [ -n "$(command -v yum)" ]; then
                echo "RPM-based system detected (YUM)"
                curl -fsSL https://packagecloud.io/install/repositories/circleci/runner/script.rpm.sh?any=true | sudo bash
                sudo yum install circleci-runner -y
              elif [ -n "$(command -v apt-get)" ]; then
                echo "DEB-based system detected (APT)"
                curl -fsSL https://packagecloud.io/install/repositories/circleci/runner/script.deb.sh?any=true | sudo bash
                sudo apt-get install -y circleci-runner
              else
                echo "Unsupported operating system. Please refer to https://circleci.com/docs/install-machine-runner-3-on-linux/. Exiting."
                exit 1
              fi

            # Configure CircleCI runner
            - sudo sed -i "s/<< AUTH_TOKEN >>/${ResourceClassToken}/g" /etc/circleci-runner/circleci-runner-config.yaml
            - sudo systemctl enable circleci-runner
            - sudo systemctl start circleci-runner
      Tags:
        - Key: Name
          Value: !Ref EC2Name

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      GroupName: !Ref EC2Name
      VpcId: !Ref VpcID
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
        - CidrIpv6: "::/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
Outputs:
  InstanceId:
    Description: Instance ID of the created EC2 instance
    Value: !Ref EC2Instance

  PublicIp:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp

  Hostname:
    Description: Hostname of the EC2 instance
    Value: !GetAtt EC2Instance.PrivateDnsName
